
TFT_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000890  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a000  08000a24  08000a24  00010a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa24  0800aa24  0001aa2c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa24  0800aa24  0001aa2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa24  0800aa2c  0001aa2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001aa2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800aa2c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800aa2c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001aa2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d85  00000000  00000000  0001aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b0  00000000  00000000  0001b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  0001bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  0001bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001044  00000000  00000000  0001c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000baa  00000000  00000000  0001d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000040f0  00000000  00000000  0001dc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00021d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004cc  00000000  00000000  00021db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a0c 	.word	0x08000a0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000a0c 	.word	0x08000a0c

080001d4 <MGPIO_voidSetPinMode>:
#include "MGPIO_Private.h"
#include "MGPIO_Config.h"


void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  )
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b05      	cmp	r3, #5
 80001ea:	d857      	bhi.n	800029c <MGPIO_voidSetPinMode+0xc8>
 80001ec:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <MGPIO_voidSetPinMode+0x20>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	0800020d 	.word	0x0800020d
 80001f8:	08000225 	.word	0x08000225
 80001fc:	0800023d 	.word	0x0800023d
 8000200:	08000255 	.word	0x08000255
 8000204:	0800026d 	.word	0x0800026d
 8000208:	08000285 	.word	0x08000285
	{
	case MGPIOA_PORT : MGPIOA->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <MGPIO_voidSetPinMode+0xd8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	7979      	ldrb	r1, [r7, #5]
 8000212:	79ba      	ldrb	r2, [r7, #6]
 8000214:	0052      	lsls	r2, r2, #1
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	4611      	mov	r1, r2
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <MGPIO_voidSetPinMode+0xd8>)
 800021e:	430b      	orrs	r3, r1
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e03c      	b.n	800029e <MGPIO_voidSetPinMode+0xca>
	case MGPIOB_PORT : MGPIOB->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <MGPIO_voidSetPinMode+0xdc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	7979      	ldrb	r1, [r7, #5]
 800022a:	79ba      	ldrb	r2, [r7, #6]
 800022c:	0052      	lsls	r2, r2, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	4611      	mov	r1, r2
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <MGPIO_voidSetPinMode+0xdc>)
 8000236:	430b      	orrs	r3, r1
 8000238:	6013      	str	r3, [r2, #0]
 800023a:	e030      	b.n	800029e <MGPIO_voidSetPinMode+0xca>
	case MGPIOC_PORT : MGPIOC->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 800023c:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <MGPIO_voidSetPinMode+0xe0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	7979      	ldrb	r1, [r7, #5]
 8000242:	79ba      	ldrb	r2, [r7, #6]
 8000244:	0052      	lsls	r2, r2, #1
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	4611      	mov	r1, r2
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <MGPIO_voidSetPinMode+0xe0>)
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	e024      	b.n	800029e <MGPIO_voidSetPinMode+0xca>
	case MGPIOD_PORT : MGPIOD->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MGPIO_voidSetPinMode+0xe4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	7979      	ldrb	r1, [r7, #5]
 800025a:	79ba      	ldrb	r2, [r7, #6]
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <MGPIO_voidSetPinMode+0xe4>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	e018      	b.n	800029e <MGPIO_voidSetPinMode+0xca>
	case MGPIOE_PORT : MGPIOE->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <MGPIO_voidSetPinMode+0xe8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	7979      	ldrb	r1, [r7, #5]
 8000272:	79ba      	ldrb	r2, [r7, #6]
 8000274:	0052      	lsls	r2, r2, #1
 8000276:	fa01 f202 	lsl.w	r2, r1, r2
 800027a:	4611      	mov	r1, r2
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <MGPIO_voidSetPinMode+0xe8>)
 800027e:	430b      	orrs	r3, r1
 8000280:	6013      	str	r3, [r2, #0]
 8000282:	e00c      	b.n	800029e <MGPIO_voidSetPinMode+0xca>
	case MGPIOH_PORT : MGPIOH->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MGPIO_voidSetPinMode+0xec>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	7979      	ldrb	r1, [r7, #5]
 800028a:	79ba      	ldrb	r2, [r7, #6]
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <MGPIO_voidSetPinMode+0xec>)
 8000296:	430b      	orrs	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	e000      	b.n	800029e <MGPIO_voidSetPinMode+0xca>

	default :  /*Error*/   break ;
 800029c:	bf00      	nop
	}	
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40020000 	.word	0x40020000
 80002b0:	40020400 	.word	0x40020400
 80002b4:	40020800 	.word	0x40020800
 80002b8:	40020c00 	.word	0x40020c00
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40021c00 	.word	0x40021c00

080002c4 <MGPIO_voidSetPinAlternativeFunction>:


void MGPIO_voidSetPinAlternativeFunction (u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Alt_Func)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 80002ce:	460b      	mov	r3, r1
 80002d0:	71bb      	strb	r3, [r7, #6]
 80002d2:	4613      	mov	r3, r2
 80002d4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d056      	beq.n	800038a <MGPIO_voidSetPinAlternativeFunction+0xc6>
 80002dc:	2b02      	cmp	r3, #2
 80002de:	dc7c      	bgt.n	80003da <MGPIO_voidSetPinAlternativeFunction+0x116>
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d002      	beq.n	80002ea <MGPIO_voidSetPinAlternativeFunction+0x26>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d028      	beq.n	800033a <MGPIO_voidSetPinAlternativeFunction+0x76>
		{
			MGPIOC->AFRH  |= (u32)(Copy_u8Alt_Func << ((Copy_u8PinNum%8) * 4));
		}
		break;

	default: break;
 80002e8:	e077      	b.n	80003da <MGPIO_voidSetPinAlternativeFunction+0x116>
		MGPIOA->MODER |= (u32)(0b10 << (2U * Copy_u8PinNum ))  ;
 80002ea:	4b3f      	ldr	r3, [pc, #252]	; (80003e8 <MGPIO_voidSetPinAlternativeFunction+0x124>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	0052      	lsls	r2, r2, #1
 80002f2:	2102      	movs	r1, #2
 80002f4:	fa01 f202 	lsl.w	r2, r1, r2
 80002f8:	4611      	mov	r1, r2
 80002fa:	4a3b      	ldr	r2, [pc, #236]	; (80003e8 <MGPIO_voidSetPinAlternativeFunction+0x124>)
 80002fc:	430b      	orrs	r3, r1
 80002fe:	6013      	str	r3, [r2, #0]
		if(Copy_u8PinNum < 8)
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b07      	cmp	r3, #7
 8000304:	d80b      	bhi.n	800031e <MGPIO_voidSetPinAlternativeFunction+0x5a>
			MGPIOA->AFRL  |= (u32)(Copy_u8Alt_Func << (Copy_u8PinNum * 4));
 8000306:	4b38      	ldr	r3, [pc, #224]	; (80003e8 <MGPIO_voidSetPinAlternativeFunction+0x124>)
 8000308:	6a1b      	ldr	r3, [r3, #32]
 800030a:	7979      	ldrb	r1, [r7, #5]
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <MGPIO_voidSetPinAlternativeFunction+0x124>)
 8000318:	430b      	orrs	r3, r1
 800031a:	6213      	str	r3, [r2, #32]
		break;
 800031c:	e05e      	b.n	80003dc <MGPIO_voidSetPinAlternativeFunction+0x118>
			MGPIOA->AFRH  |= (u32)(Copy_u8Alt_Func << ((Copy_u8PinNum%8) * 4));
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <MGPIO_voidSetPinAlternativeFunction+0x124>)
 8000320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000322:	7979      	ldrb	r1, [r7, #5]
 8000324:	79ba      	ldrb	r2, [r7, #6]
 8000326:	f002 0207 	and.w	r2, r2, #7
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a2d      	ldr	r2, [pc, #180]	; (80003e8 <MGPIO_voidSetPinAlternativeFunction+0x124>)
 8000334:	430b      	orrs	r3, r1
 8000336:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8000338:	e050      	b.n	80003dc <MGPIO_voidSetPinAlternativeFunction+0x118>
		MGPIOB->MODER |= (u32)(0b10 << (2U * Copy_u8PinNum ))  ;
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <MGPIO_voidSetPinAlternativeFunction+0x128>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	79ba      	ldrb	r2, [r7, #6]
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	2102      	movs	r1, #2
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a28      	ldr	r2, [pc, #160]	; (80003ec <MGPIO_voidSetPinAlternativeFunction+0x128>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6013      	str	r3, [r2, #0]
		if(Copy_u8PinNum < 8)
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	2b07      	cmp	r3, #7
 8000354:	d80b      	bhi.n	800036e <MGPIO_voidSetPinAlternativeFunction+0xaa>
			MGPIOB->AFRL  |= (u32)(Copy_u8Alt_Func << (Copy_u8PinNum * 4));
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MGPIO_voidSetPinAlternativeFunction+0x128>)
 8000358:	6a1b      	ldr	r3, [r3, #32]
 800035a:	7979      	ldrb	r1, [r7, #5]
 800035c:	79ba      	ldrb	r2, [r7, #6]
 800035e:	0092      	lsls	r2, r2, #2
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <MGPIO_voidSetPinAlternativeFunction+0x128>)
 8000368:	430b      	orrs	r3, r1
 800036a:	6213      	str	r3, [r2, #32]
		break;
 800036c:	e036      	b.n	80003dc <MGPIO_voidSetPinAlternativeFunction+0x118>
			MGPIOB->AFRH  |= (u32)(Copy_u8Alt_Func << ((Copy_u8PinNum%8) * 4));
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <MGPIO_voidSetPinAlternativeFunction+0x128>)
 8000370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000372:	7979      	ldrb	r1, [r7, #5]
 8000374:	79ba      	ldrb	r2, [r7, #6]
 8000376:	f002 0207 	and.w	r2, r2, #7
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <MGPIO_voidSetPinAlternativeFunction+0x128>)
 8000384:	430b      	orrs	r3, r1
 8000386:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8000388:	e028      	b.n	80003dc <MGPIO_voidSetPinAlternativeFunction+0x118>
		MGPIOC->MODER |= (u32)(0b10 << (2U * Copy_u8PinNum ))  ;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MGPIO_voidSetPinAlternativeFunction+0x12c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	79ba      	ldrb	r2, [r7, #6]
 8000390:	0052      	lsls	r2, r2, #1
 8000392:	2102      	movs	r1, #2
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <MGPIO_voidSetPinAlternativeFunction+0x12c>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
		if(Copy_u8PinNum < 8)
 80003a0:	79bb      	ldrb	r3, [r7, #6]
 80003a2:	2b07      	cmp	r3, #7
 80003a4:	d80b      	bhi.n	80003be <MGPIO_voidSetPinAlternativeFunction+0xfa>
			MGPIOC->AFRL  |= (u32)(Copy_u8Alt_Func << (Copy_u8PinNum * 4));
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MGPIO_voidSetPinAlternativeFunction+0x12c>)
 80003a8:	6a1b      	ldr	r3, [r3, #32]
 80003aa:	7979      	ldrb	r1, [r7, #5]
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	0092      	lsls	r2, r2, #2
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <MGPIO_voidSetPinAlternativeFunction+0x12c>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6213      	str	r3, [r2, #32]
		break;
 80003bc:	e00e      	b.n	80003dc <MGPIO_voidSetPinAlternativeFunction+0x118>
			MGPIOC->AFRH  |= (u32)(Copy_u8Alt_Func << ((Copy_u8PinNum%8) * 4));
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MGPIO_voidSetPinAlternativeFunction+0x12c>)
 80003c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c2:	7979      	ldrb	r1, [r7, #5]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	f002 0207 	and.w	r2, r2, #7
 80003ca:	0092      	lsls	r2, r2, #2
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <MGPIO_voidSetPinAlternativeFunction+0x12c>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80003d8:	e000      	b.n	80003dc <MGPIO_voidSetPinAlternativeFunction+0x118>
	default: break;
 80003da:	bf00      	nop
	}
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40020000 	.word	0x40020000
 80003ec:	40020400 	.word	0x40020400
 80003f0:	40020800 	.word	0x40020800

080003f4 <MGPIO_voidSetPinValue>:
	return LOC_u8PinValue ;
}


void MGPIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
 80003fe:	460b      	mov	r3, r1
 8000400:	71bb      	strb	r3, [r7, #6]
 8000402:	4613      	mov	r3, r2
 8000404:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinValue == MGPIO_HIGH)
 8000406:	797b      	ldrb	r3, [r7, #5]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d155      	bne.n	80004b8 <MGPIO_voidSetPinValue+0xc4>
	{
		switch(Copy_u8PortName)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	2b05      	cmp	r3, #5
 8000410:	f200 80ac 	bhi.w	800056c <MGPIO_voidSetPinValue+0x178>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <MGPIO_voidSetPinValue+0x28>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000435 	.word	0x08000435
 8000420:	0800044b 	.word	0x0800044b
 8000424:	08000461 	.word	0x08000461
 8000428:	08000477 	.word	0x08000477
 800042c:	0800048d 	.word	0x0800048d
 8000430:	080004a3 	.word	0x080004a3
		{
		case MGPIOA_PORT : SET_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ;
 8000434:	4b52      	ldr	r3, [pc, #328]	; (8000580 <MGPIO_voidSetPinValue+0x18c>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	79ba      	ldrb	r2, [r7, #6]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	4611      	mov	r1, r2
 8000442:	4a4f      	ldr	r2, [pc, #316]	; (8000580 <MGPIO_voidSetPinValue+0x18c>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	e093      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOB_PORT : SET_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ;
 800044a:	4b4e      	ldr	r3, [pc, #312]	; (8000584 <MGPIO_voidSetPinValue+0x190>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	79ba      	ldrb	r2, [r7, #6]
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	4611      	mov	r1, r2
 8000458:	4a4a      	ldr	r2, [pc, #296]	; (8000584 <MGPIO_voidSetPinValue+0x190>)
 800045a:	430b      	orrs	r3, r1
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	e088      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOC_PORT : SET_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 8000460:	4b49      	ldr	r3, [pc, #292]	; (8000588 <MGPIO_voidSetPinValue+0x194>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	79ba      	ldrb	r2, [r7, #6]
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a46      	ldr	r2, [pc, #280]	; (8000588 <MGPIO_voidSetPinValue+0x194>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6153      	str	r3, [r2, #20]
 8000474:	e07d      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOD_PORT : SET_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ;
 8000476:	4b45      	ldr	r3, [pc, #276]	; (800058c <MGPIO_voidSetPinValue+0x198>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	79ba      	ldrb	r2, [r7, #6]
 800047c:	2101      	movs	r1, #1
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	4611      	mov	r1, r2
 8000484:	4a41      	ldr	r2, [pc, #260]	; (800058c <MGPIO_voidSetPinValue+0x198>)
 8000486:	430b      	orrs	r3, r1
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	e072      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOE_PORT : SET_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ;
 800048c:	4b40      	ldr	r3, [pc, #256]	; (8000590 <MGPIO_voidSetPinValue+0x19c>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	2101      	movs	r1, #1
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a3d      	ldr	r2, [pc, #244]	; (8000590 <MGPIO_voidSetPinValue+0x19c>)
 800049c:	430b      	orrs	r3, r1
 800049e:	6153      	str	r3, [r2, #20]
 80004a0:	e067      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOH_PORT : SET_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ;
 80004a2:	4b3c      	ldr	r3, [pc, #240]	; (8000594 <MGPIO_voidSetPinValue+0x1a0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	79ba      	ldrb	r2, [r7, #6]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a38      	ldr	r2, [pc, #224]	; (8000594 <MGPIO_voidSetPinValue+0x1a0>)
 80004b2:	430b      	orrs	r3, r1
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	e05c      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		default :  /*Error*/   break ;
		}
	}
	else
	{
		switch(Copy_u8PortName)
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b05      	cmp	r3, #5
 80004bc:	d858      	bhi.n	8000570 <MGPIO_voidSetPinValue+0x17c>
 80004be:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <MGPIO_voidSetPinValue+0xd0>)
 80004c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c4:	080004dd 	.word	0x080004dd
 80004c8:	080004f5 	.word	0x080004f5
 80004cc:	0800050d 	.word	0x0800050d
 80004d0:	08000525 	.word	0x08000525
 80004d4:	0800053d 	.word	0x0800053d
 80004d8:	08000555 	.word	0x08000555
		{
		case MGPIOA_PORT : CLR_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ;
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <MGPIO_voidSetPinValue+0x18c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	79ba      	ldrb	r2, [r7, #6]
 80004e2:	2101      	movs	r1, #1
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a24      	ldr	r2, [pc, #144]	; (8000580 <MGPIO_voidSetPinValue+0x18c>)
 80004ee:	400b      	ands	r3, r1
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	e03e      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOB_PORT : CLR_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <MGPIO_voidSetPinValue+0x190>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	79ba      	ldrb	r2, [r7, #6]
 80004fa:	2101      	movs	r1, #1
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	43d2      	mvns	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a1f      	ldr	r2, [pc, #124]	; (8000584 <MGPIO_voidSetPinValue+0x190>)
 8000506:	400b      	ands	r3, r1
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	e032      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOC_PORT : CLR_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MGPIO_voidSetPinValue+0x194>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	79ba      	ldrb	r2, [r7, #6]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	43d2      	mvns	r2, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4a1a      	ldr	r2, [pc, #104]	; (8000588 <MGPIO_voidSetPinValue+0x194>)
 800051e:	400b      	ands	r3, r1
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	e026      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOD_PORT : CLR_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ;
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <MGPIO_voidSetPinValue+0x198>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	79ba      	ldrb	r2, [r7, #6]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	43d2      	mvns	r2, r2
 8000532:	4611      	mov	r1, r2
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <MGPIO_voidSetPinValue+0x198>)
 8000536:	400b      	ands	r3, r1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	e01a      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOE_PORT : CLR_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MGPIO_voidSetPinValue+0x19c>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	79ba      	ldrb	r2, [r7, #6]
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	43d2      	mvns	r2, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a10      	ldr	r2, [pc, #64]	; (8000590 <MGPIO_voidSetPinValue+0x19c>)
 800054e:	400b      	ands	r3, r1
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	e00e      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOH_PORT : CLR_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MGPIO_voidSetPinValue+0x1a0>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	79ba      	ldrb	r2, [r7, #6]
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	43d2      	mvns	r2, r2
 8000562:	4611      	mov	r1, r2
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <MGPIO_voidSetPinValue+0x1a0>)
 8000566:	400b      	ands	r3, r1
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	e002      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		default :  /*Error*/   break ;
 800056c:	bf00      	nop
 800056e:	e000      	b.n	8000572 <MGPIO_voidSetPinValue+0x17e>
		default :  /*Error*/   break ;
 8000570:	bf00      	nop
		}
	}
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40020000 	.word	0x40020000
 8000584:	40020400 	.word	0x40020400
 8000588:	40020800 	.word	0x40020800
 800058c:	40020c00 	.word	0x40020c00
 8000590:	40021000 	.word	0x40021000
 8000594:	40021c00 	.word	0x40021c00

08000598 <MRCC_voidEnablePeripheralClock>:
   @param[in]   Copy_uddtBusName  : The Bus of The Peripheral [AHB1 , AHB2 , APB1 ,APB2] Every one  Detect 
   Which REG to Choise Peripherial From It   
   @param[in]   Copy_u8PerNum  : The order of Peripheral On The Selected Register
*/
void MRCC_voidEnablePeripheralClock(BusName_t Copy_uddtBusName,u8 Copy_u8PerNum)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBusName)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d836      	bhi.n	800061c <MRCC_voidEnablePeripheralClock+0x84>
 80005ae:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <MRCC_voidEnablePeripheralClock+0x1c>)
 80005b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b4:	080005c5 	.word	0x080005c5
 80005b8:	080005db 	.word	0x080005db
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	08000607 	.word	0x08000607
	{  
     case AHB1  : SET_BIT(RCC->AHB1ENR,Copy_u8PerNum) ; break ;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	79ba      	ldrb	r2, [r7, #6]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
 80005d8:	e021      	b.n	800061e <MRCC_voidEnablePeripheralClock+0x86>
     case AHB2  : SET_BIT(RCC->AHB2ENR,Copy_u8PerNum) ; break ;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	2101      	movs	r1, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6353      	str	r3, [r2, #52]	; 0x34
 80005ee:	e016      	b.n	800061e <MRCC_voidEnablePeripheralClock+0x86>
     case APB1  : SET_BIT(RCC->APB1ENR,Copy_u8PerNum) ; break ;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	2101      	movs	r1, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	e00b      	b.n	800061e <MRCC_voidEnablePeripheralClock+0x86>
     case APB2  : SET_BIT(RCC->APB2ENR,Copy_u8PerNum) ; break ;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <MRCC_voidEnablePeripheralClock+0x94>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6453      	str	r3, [r2, #68]	; 0x44
 800061a:	e000      	b.n	800061e <MRCC_voidEnablePeripheralClock+0x86>
	 default    : /* ERROR*/         break ; 
 800061c:	bf00      	nop
	}
	
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <MRCC_voidInitSystemClk>:
/*
   @fu MRCC_voidInitSystemClk 
   @brief   This Function used To Initializaion for System clock   
*/
void MRCC_voidInitSystemClk(void)
{   
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
    /***************HSI************/
	#if MRCC_CLKSRC == HSI
	/*1- Enable HSI */
	SET_BIT(RCC->CR,0U);
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MRCC_voidInitSystemClk+0x34>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <MRCC_voidInitSystemClk+0x34>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]
	/*2-Clk System -->HSI */
	CLR_BIT(RCC->CFGR,0U);
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MRCC_voidInitSystemClk+0x34>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <MRCC_voidInitSystemClk+0x34>)
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR,1U);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <MRCC_voidInitSystemClk+0x34>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <MRCC_voidInitSystemClk+0x34>)
 8000652:	f023 0302 	bic.w	r3, r3, #2
 8000656:	6093      	str	r3, [r2, #8]
      #error "Invalid Option For Clock Source  ..... " 		
	#endif
/*#####################################################################*/
/*                  THE END OF PROGRAM FILE                      */
/*#####################################################################*/
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <SPI_voidInit>:
#include "SPI_config.h"
#include "SPI_interface.h"


void SPI_voidInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	 * 5- 8-Bits Data
	 * 6- SSM ,SSI -> 1
	 * 7- SPI Enable
	 * 8- LSB first = 0 then MSB first 1
	 */
	SPI->CR1 = 0x0347;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SPI_voidInit+0x18>)
 800066e:	f240 3247 	movw	r2, #839	; 0x347
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40013000 	.word	0x40013000

08000684 <SPI_voidSendReceive>:


u8 SPI_voidSendReceive(u8 Copy_u8DataToTransmit)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinMode(SPI_SLAVE_SELECT, MGPIO_MODE_OUTPUT);
 800068e:	2201      	movs	r2, #1
 8000690:	2100      	movs	r1, #0
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fd9e 	bl	80001d4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinValue(SPI_SLAVE_SELECT, MGPIO_LOW);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fea9 	bl	80003f4 <MGPIO_voidSetPinValue>

	/* Send Data */
	SPI -> DR = Copy_u8DataToTransmit;
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <SPI_voidSendReceive+0x4c>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	60d3      	str	r3, [r2, #12]

	/* Wait Busy Flag to finish */
	while (GET_BIT(SPI -> SR, 7));
 80006a8:	bf00      	nop
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <SPI_voidSendReceive+0x4c>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	09db      	lsrs	r3, r3, #7
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f8      	bne.n	80006aa <SPI_voidSendReceive+0x26>

	MGPIO_voidSetPinValue(SPI_SLAVE_SELECT, MGPIO_HIGH);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2100      	movs	r1, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fe99 	bl	80003f4 <MGPIO_voidSetPinValue>

	/* Return to the received data */
	return (u8)(SPI -> DR);
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <SPI_voidSendReceive+0x4c>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	b2db      	uxtb	r3, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013000 	.word	0x40013000

080006d4 <STK_voidInit>:

static u8 Global_u8IntervalMode = 0;


void STK_voidInit( void )
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

	// Choose the input CLK source.
#if CLK_SOURCE == AHB_DividedBy8

	CLR_BIT( SYSTICK->STK_CTRL, 2 ) ;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <STK_voidInit+0x1c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <STK_voidInit+0x1c>)
 80006de:	f023 0304 	bic.w	r3, r3, #4
 80006e2:	6013      	str	r3, [r2, #0]
#elif CLK_SOURCE == AHB

	SET_BIT( SYSTICK->STK_CTRL, 2 ) ;

#endif
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010

080006f4 <STK_voidSetBusyWaitInterval>:


void STK_voidSetBusyWaitInterval (u32 Copy_u32Ticks)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	// Load Ticks to the load register.
	SYSTICK->STK_LOAD = Copy_u32Ticks ;
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6053      	str	r3, [r2, #4]

	// Disable the interrupt.
	CLR_BIT( SYSTICK->STK_CTRL, 1 ) ;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000708:	f023 0302 	bic.w	r3, r3, #2
 800070c:	6013      	str	r3, [r2, #0]

	// Start Timer.
	SET_BIT( SYSTICK->STK_CTRL, 0 ) ;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6013      	str	r3, [r2, #0]

	// Busy Wait until the flag is raised.  
	while( GET_BIT( SYSTICK->STK_CTRL, 16 ) != 1 ) 
 800071a:	e000      	b.n	800071e <STK_voidSetBusyWaitInterval+0x2a>
	{
		asm("NOP");
 800071c:	bf00      	nop
	while( GET_BIT( SYSTICK->STK_CTRL, 16 ) != 1 ) 
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	2b01      	cmp	r3, #1
 800072a:	d1f7      	bne.n	800071c <STK_voidSetBusyWaitInterval+0x28>
	}

	// Stop the timer.
	CLR_BIT( SYSTICK->STK_CTRL, 0 ) ;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

	/*Clear Flag*/
	SET_BIT( SYSTICK->STK_CTRL, 16 ) ;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 800073e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000742:	6013      	str	r3, [r2, #0]


	// Clear the LOAD and VAL registers
	SYSTICK->STK_LOAD = 0 ;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
	SYSTICK->STK_VAL  = 0 ;
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <STK_voidSetBusyWaitInterval+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]


}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e010 	.word	0xe000e010

08000760 <SysTick_Handler>:
{
	CallbackFunc = ptr;
}

void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	// Callback notification.
	CallbackFunc( ) ;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <SysTick_Handler+0x48>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4798      	blx	r3

	if( Global_u8IntervalMode == SINGLE_INTERVAL_MODE )
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <SysTick_Handler+0x4c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d111      	bne.n	8000796 <SysTick_Handler+0x36>
	{

		// Disable the IRQ.
		CLR_BIT( SYSTICK->STK_CTRL, 1 ) ;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SysTick_Handler+0x50>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <SysTick_Handler+0x50>)
 8000778:	f023 0302 	bic.w	r3, r3, #2
 800077c:	6013      	str	r3, [r2, #0]

		// Stop the timer.
		CLR_BIT( SYSTICK->STK_CTRL, 0 ) ;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <SysTick_Handler+0x50>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <SysTick_Handler+0x50>)
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	6013      	str	r3, [r2, #0]

		// Clear the LOAD and VAL registers
		SYSTICK->STK_LOAD = 0 ;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <SysTick_Handler+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
		SYSTICK->STK_VAL  = 0 ;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <SysTick_Handler+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
	}

	/*Clear Flag*/
	SET_BIT( SYSTICK->STK_CTRL , 16 );
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <SysTick_Handler+0x50>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <SysTick_Handler+0x50>)
 800079c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a0:	6013      	str	r3, [r2, #0]

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000001c 	.word	0x2000001c
 80007ac:	20000020 	.word	0x20000020
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <TFT_voidResetSequence>:
#include "TFT_private.h"
#include "TFT_config.h"
#include "TFT_interface.h"

void TFT_voidResetSequence(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	/*Reset Pulse ,Tick Time = 0.5 Microsecond*/
	MGPIO_voidSetPinValue(TFT_RST_PIN , MGPIO_HIGH);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fe19 	bl	80003f4 <MGPIO_voidSetPinValue>
	STK_voidSetBusyWaitInterval(200);    //100 Microsecond
 80007c2:	20c8      	movs	r0, #200	; 0xc8
 80007c4:	f7ff ff96 	bl	80006f4 <STK_voidSetBusyWaitInterval>
	MGPIO_voidSetPinValue(TFT_RST_PIN , MGPIO_LOW);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fe11 	bl	80003f4 <MGPIO_voidSetPinValue>
	STK_voidSetBusyWaitInterval(2);		 //1 Microsecond
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff ff8e 	bl	80006f4 <STK_voidSetBusyWaitInterval>
	MGPIO_voidSetPinValue(TFT_RST_PIN , MGPIO_HIGH);
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fe09 	bl	80003f4 <MGPIO_voidSetPinValue>
	STK_voidSetBusyWaitInterval(200);	 //100 Microsecond
 80007e2:	20c8      	movs	r0, #200	; 0xc8
 80007e4:	f7ff ff86 	bl	80006f4 <STK_voidSetBusyWaitInterval>
	MGPIO_voidSetPinValue(TFT_RST_PIN , MGPIO_LOW);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2101      	movs	r1, #1
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fe01 	bl	80003f4 <MGPIO_voidSetPinValue>
	STK_voidSetBusyWaitInterval(200);	 //100 Microsecond
 80007f2:	20c8      	movs	r0, #200	; 0xc8
 80007f4:	f7ff ff7e 	bl	80006f4 <STK_voidSetBusyWaitInterval>
	MGPIO_voidSetPinValue(TFT_RST_PIN , MGPIO_HIGH);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fdf9 	bl	80003f4 <MGPIO_voidSetPinValue>
	STK_voidSetBusyWaitInterval(240000); // 120 MS
 8000802:	4802      	ldr	r0, [pc, #8]	; (800080c <TFT_voidResetSequence+0x58>)
 8000804:	f7ff ff76 	bl	80006f4 <STK_voidSetBusyWaitInterval>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	0003a980 	.word	0x0003a980

08000810 <TFT_voidInit>:

void TFT_voidInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	/*Reset sequence*/
	TFT_voidResetSequence();
 8000814:	f7ff ffce 	bl	80007b4 <TFT_voidResetSequence>

	/*Send Sleep_out command ID = 0x11*/
	TFT_voidWriteCommand(0x11);
 8000818:	2011      	movs	r0, #17
 800081a:	f000 f859 	bl	80008d0 <TFT_voidWriteCommand>

	/*Delay for 150MS*/
	STK_voidSetBusyWaitInterval(300000);
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <TFT_voidInit+0x2c>)
 8000820:	f7ff ff68 	bl	80006f4 <STK_voidSetBusyWaitInterval>

	/*Choose color coding ID -> 0x3A   ,  RGB656 -> Parameter -> 0x05*/
	TFT_voidWriteCommand(0x3A);   // Id
 8000824:	203a      	movs	r0, #58	; 0x3a
 8000826:	f000 f853 	bl	80008d0 <TFT_voidWriteCommand>
	TFT_voidWriteData(0x05);	  // Data  -> RGB 656 -> 0x05
 800082a:	2005      	movs	r0, #5
 800082c:	f000 f862 	bl	80008f4 <TFT_voidWriteData>

	/*Display on Command =? ID = 0x29*/
	TFT_voidWriteCommand(0x29);
 8000830:	2029      	movs	r0, #41	; 0x29
 8000832:	f000 f84d 	bl	80008d0 <TFT_voidWriteCommand>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	000493e0 	.word	0x000493e0

08000840 <TFT_voidDisplayImage>:

void TFT_voidDisplayImage (const u16 *Copy_pu16Image)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	u16 Local_u16Counter;

	/*Set X Address*/
	TFT_voidWriteCommand(0x2A); 		//Set X address command ID
 8000848:	202a      	movs	r0, #42	; 0x2a
 800084a:	f000 f841 	bl	80008d0 <TFT_voidWriteCommand>

	/*Start Address*/
	TFT_voidWriteData(0);		//Set X Address Command Data Parameter 1Byte MSB
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f850 	bl	80008f4 <TFT_voidWriteData>
	TFT_voidWriteData(0);		//Set X Address Command Data Parameter 2Byte LSB
 8000854:	2000      	movs	r0, #0
 8000856:	f000 f84d 	bl	80008f4 <TFT_voidWriteData>

	/*End Address*/
	TFT_voidWriteData(0);		//Set X Address Command Data Parameter 1Byte MSB
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f84a 	bl	80008f4 <TFT_voidWriteData>
	TFT_voidWriteData(127);		//Set X Address Command Data Parameter 2Byte LSB
 8000860:	207f      	movs	r0, #127	; 0x7f
 8000862:	f000 f847 	bl	80008f4 <TFT_voidWriteData>

	/*Set Y Address*/
	TFT_voidWriteCommand(0x2B); 		//Set Y address command ID
 8000866:	202b      	movs	r0, #43	; 0x2b
 8000868:	f000 f832 	bl	80008d0 <TFT_voidWriteCommand>

	/*Start Address*/
	TFT_voidWriteData(0);		//Set Y Address Command Data Parameter 1Byte MSB
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f841 	bl	80008f4 <TFT_voidWriteData>
	TFT_voidWriteData(0);		//Set Y Address Command Data Parameter 2Byte LSB
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f83e 	bl	80008f4 <TFT_voidWriteData>

	/*End Address*/
	TFT_voidWriteData(0);		//Set Y Address Command Data Parameter 1Byte MSB
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f83b 	bl	80008f4 <TFT_voidWriteData>
	TFT_voidWriteData(159);		//Set Y Address Command Data Parameter 2Byte LSB
 800087e:	209f      	movs	r0, #159	; 0x9f
 8000880:	f000 f838 	bl	80008f4 <TFT_voidWriteData>


	/* RAM Write command */
	TFT_voidWriteCommand(0x2C);
 8000884:	202c      	movs	r0, #44	; 0x2c
 8000886:	f000 f823 	bl	80008d0 <TFT_voidWriteCommand>

	/*Display*/
	for(Local_u16Counter = 0 ; Local_u16Counter < TFT_DISPALY_SIZE ; Local_u16Counter++)
 800088a:	2300      	movs	r3, #0
 800088c:	81fb      	strh	r3, [r7, #14]
 800088e:	e016      	b.n	80008be <TFT_voidDisplayImage+0x7e>
	{
		/*Send MSByte*/
		TFT_voidWriteData(Copy_pu16Image[Local_u16Counter] >> 8);
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f827 	bl	80008f4 <TFT_voidWriteData>
		/*Send LSByte*/
		TFT_voidWriteData(Copy_pu16Image[Local_u16Counter] & 0x00ff);
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f81e 	bl	80008f4 <TFT_voidWriteData>
	for(Local_u16Counter = 0 ; Local_u16Counter < TFT_DISPALY_SIZE ; Local_u16Counter++)
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	3301      	adds	r3, #1
 80008bc:	81fb      	strh	r3, [r7, #14]
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80008c4:	d3e4      	bcc.n	8000890 <TFT_voidDisplayImage+0x50>
	}
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <TFT_voidWriteCommand>:

static void TFT_voidWriteCommand(u8 Copy_u8Command)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	/*Pull TFT_A0_PIN to ground*/
	MGPIO_voidSetPinValue(TFT_A0_PIN , MGPIO_LOW);
 80008da:	2200      	movs	r2, #0
 80008dc:	2102      	movs	r1, #2
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fd88 	bl	80003f4 <MGPIO_voidSetPinValue>

	/*Send value of command   // Type casting for i tell compiler i not care the return  */
	(void)SPI_voidSendReceive(Copy_u8Command);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fecc 	bl	8000684 <SPI_voidSendReceive>

}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <TFT_voidWriteData>:

static void TFT_voidWriteData(u8 Copy_u8Data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	/*Pull TFT_A0_PIN to VCC*/
	MGPIO_voidSetPinValue(TFT_A0_PIN , MGPIO_HIGH);
 80008fe:	2201      	movs	r2, #1
 8000900:	2102      	movs	r1, #2
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fd76 	bl	80003f4 <MGPIO_voidSetPinValue>

	/*Send value of data   // Type casting for i tell compiler i not care the return*/
	(void)SPI_voidSendReceive(Copy_u8Data);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff feba 	bl	8000684 <SPI_voidSendReceive>

}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <main>:
#include "TFT_interface.h"



int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	/*RCC initialization*/
	MRCC_voidInitSystemClk();
 800091c:	f7ff fe88 	bl	8000630 <MRCC_voidInitSystemClk>
	MRCC_voidEnablePeripheralClock(AHB1, MRCC_PERIPHERAL_EN_GPIOA);
 8000920:	2100      	movs	r1, #0
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fe38 	bl	8000598 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB2,MRCC_PERIPHERAL_EN_SPI_1 );
 8000928:	210c      	movs	r1, #12
 800092a:	2003      	movs	r0, #3
 800092c:	f7ff fe34 	bl	8000598 <MRCC_voidEnablePeripheralClock>

	/*Pin Configuration*/
	MGPIO_voidSetPinMode(MGPIOA_PORT, MGPIO_PIN1, MGPIO_MODE_OUTPUT);	// Reset
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fc4d 	bl	80001d4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MGPIOA_PORT, MGPIO_PIN2, MGPIO_MODE_OUTPUT);	// A0
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff fc48 	bl	80001d4 <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinAlternativeFunction(MGPIOA_PORT, MGPIO_PIN5, GPIOx_AF5); // SCK
 8000944:	2205      	movs	r2, #5
 8000946:	2105      	movs	r1, #5
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fcbb 	bl	80002c4 <MGPIO_voidSetPinAlternativeFunction>
	MGPIO_voidSetPinAlternativeFunction(MGPIOA_PORT, MGPIO_PIN7, GPIOx_AF5); //MOSI
 800094e:	2205      	movs	r2, #5
 8000950:	2107      	movs	r1, #7
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fcb6 	bl	80002c4 <MGPIO_voidSetPinAlternativeFunction>

	/*Systick initialization*/
	STK_voidInit();
 8000958:	f7ff febc 	bl	80006d4 <STK_voidInit>

	/*SPI initialization*/
	SPI_voidInit();
 800095c:	f7ff fe84 	bl	8000668 <SPI_voidInit>

	/*TFT initialization*/
	TFT_voidInit();
 8000960:	f7ff ff56 	bl	8000810 <TFT_voidInit>

	/*Display Image */
	TFT_voidDisplayImage(Image);
 8000964:	4801      	ldr	r0, [pc, #4]	; (800096c <main+0x54>)
 8000966:	f7ff ff6b 	bl	8000840 <TFT_voidDisplayImage>

	while(1)
 800096a:	e7fe      	b.n	800096a <main+0x52>
 800096c:	08000a24 	.word	0x08000a24

08000970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000974:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800099e:	f000 f811 	bl	80009c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a2:	f7ff ffb9 	bl	8000918 <main>

080009a6 <LoopForever>:

LoopForever:
  b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   r0, =_estack
 80009a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009b4:	0800aa2c 	.word	0x0800aa2c
  ldr r2, =_sbss
 80009b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009bc:	20000024 	.word	0x20000024

080009c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>
	...

080009c4 <__libc_init_array>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	4d0d      	ldr	r5, [pc, #52]	; (80009fc <__libc_init_array+0x38>)
 80009c8:	4c0d      	ldr	r4, [pc, #52]	; (8000a00 <__libc_init_array+0x3c>)
 80009ca:	1b64      	subs	r4, r4, r5
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	2600      	movs	r6, #0
 80009d0:	42a6      	cmp	r6, r4
 80009d2:	d109      	bne.n	80009e8 <__libc_init_array+0x24>
 80009d4:	4d0b      	ldr	r5, [pc, #44]	; (8000a04 <__libc_init_array+0x40>)
 80009d6:	4c0c      	ldr	r4, [pc, #48]	; (8000a08 <__libc_init_array+0x44>)
 80009d8:	f000 f818 	bl	8000a0c <_init>
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	10a4      	asrs	r4, r4, #2
 80009e0:	2600      	movs	r6, #0
 80009e2:	42a6      	cmp	r6, r4
 80009e4:	d105      	bne.n	80009f2 <__libc_init_array+0x2e>
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ec:	4798      	blx	r3
 80009ee:	3601      	adds	r6, #1
 80009f0:	e7ee      	b.n	80009d0 <__libc_init_array+0xc>
 80009f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f6:	4798      	blx	r3
 80009f8:	3601      	adds	r6, #1
 80009fa:	e7f2      	b.n	80009e2 <__libc_init_array+0x1e>
 80009fc:	0800aa24 	.word	0x0800aa24
 8000a00:	0800aa24 	.word	0x0800aa24
 8000a04:	0800aa24 	.word	0x0800aa24
 8000a08:	0800aa28 	.word	0x0800aa28

08000a0c <_init>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	bf00      	nop
 8000a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a12:	bc08      	pop	{r3}
 8000a14:	469e      	mov	lr, r3
 8000a16:	4770      	bx	lr

08000a18 <_fini>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr
